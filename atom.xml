<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason&#39;s blog</title>
  
  <subtitle>xixihaha</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-23T06:13:25.180Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jason Shen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>this 指向</title>
    <link href="http://yoursite.com/2019/12/23/this/"/>
    <id>http://yoursite.com/2019/12/23/this/</id>
    <published>2019-12-23T06:12:23.426Z</published>
    <updated>2019-12-23T06:13:25.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><blockquote><p>this 是JavaScript语言的一个关键字<br>this指向的本质：谁调用指向谁 + 就近原则</p></blockquote><h4 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h4><p>this始终指向全局对象Window，无论是否严格模式</p><h4 id="对象中"><a href="#对象中" class="headerlink" title="对象中"></a>对象中</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">a : <span class="number">5</span>,</span><br><span class="line">f1 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === obj1) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1.f1();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">a : <span class="number">5</span>,</span><br><span class="line">f2 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === obj2) <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> init = obj2.f2 <span class="comment">//重点看这里</span></span><br><span class="line">init();</span><br></pre></td></tr></table></figure><p>当函数作为对象的属性来调用时，谁调用则this指向谁。obj1.f1()由obj1调用，this指向obj1；obj2.f2由init调用，相当于window.init()，所以this指向window。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">a : <span class="number">5</span>,</span><br><span class="line">obj4 : &#123;</span><br><span class="line">a : <span class="number">10</span>,</span><br><span class="line">f3 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a) <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj3.obj4.f3();</span><br></pre></td></tr></table></figure></p><p>虽然最终调用的是obj3,但是在遵循就近原则的情况下，调用他的是obj4，所以this指向的是obj4，那么必然打印出来的就是10了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj5 = &#123;</span><br><span class="line">a : <span class="number">5</span>,</span><br><span class="line">f5 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === obj5) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> init = obj5;</span><br><span class="line">init.f5();</span><br></pre></td></tr></table></figure></p><p>在这里直接将对象obj5赋值给变量init，然后由变量去调用f5,实则和obj5去调用f5是一样的，this指向的还是对象obj5,所以在这里一定要注意，千万不要认为是window调用函数f5。</p><h4 id="call中的this关键字"><a href="#call中的this关键字" class="headerlink" title="call中的this关键字"></a>call中的this关键字</h4><blockquote><p>call() 、bind()、apply()这类方法绑定this关键字又称为显示绑定，明面上我们完全可以看到他指向了谁<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f7</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a) <span class="comment">// 20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj5 = &#123;</span><br><span class="line">a : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">f7.call(obj5);</span><br><span class="line">obj5.x();</span><br></pre></td></tr></table></figure></p></blockquote><p>通过call()方法，函数f7被封装为对象obj5的一个属性，this的值指向了调用函数的对象obj5了，</p><p>通过对call()方法的使用，我们知道，如果第一个参数为null，或者不写，那么其间的对象就是window。</p><h4 id="构造函数中的this"><a href="#构造函数中的this" class="headerlink" title="构造函数中的this"></a>构造函数中的this</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">this</span>.b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">this</span>.f6 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.c = <span class="keyword">this</span>.a+<span class="keyword">this</span>.b;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.c); <span class="comment">//30</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === F1) <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oInit = <span class="keyword">new</span> F1();</span><br><span class="line">oInit.f6();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;this指向&quot;&gt;&lt;a href=&quot;#this指向&quot; class=&quot;headerlink&quot; title=&quot;this指向&quot;&gt;&lt;/a&gt;this指向&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;this 是JavaScript语言的一个关键字&lt;br&gt;this指向的本质：谁调用
      
    
    </summary>
    
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序参考链接</title>
    <link href="http://yoursite.com/2018/10/23/wechat/"/>
    <id>http://yoursite.com/2018/10/23/wechat/</id>
    <published>2018-10-23T06:19:19.924Z</published>
    <updated>2018-10-23T06:20:11.188Z</updated>
    
    <content type="html"><![CDATA[<h1 id="微信小程序问题"><a href="#微信小程序问题" class="headerlink" title="微信小程序问题"></a>微信小程序问题</h1><h2 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h2><p><strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/share.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/api/share.html</a></strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onShareAppMessage: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        title: <span class="string">''</span>,</span><br><span class="line">        desc: <span class="string">'自定义描述'</span>,</span><br><span class="line">        path: <span class="string">'/page/user?id=123'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="模版消息"><a href="#模版消息" class="headerlink" title="模版消息"></a>模版消息</h2><p><strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/notice.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/api/notice.html</a></strong></p><h2 id="扫码"><a href="#扫码" class="headerlink" title="扫码"></a>扫码</h2><p><strong><a href="https://developers.weixin.qq.com/miniprogram/dev/api/scancode.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/miniprogram/dev/api/scancode.html</a></strong></p><h2 id="小程序使用iconfont"><a href="#小程序使用iconfont" class="headerlink" title="小程序使用iconfont"></a>小程序使用iconfont</h2><p><strong><a href="https://blog.csdn.net/nongweiyilady/article/details/74244362" target="_blank" rel="noopener">https://blog.csdn.net/nongweiyilady/article/details/74244362</a></strong></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;微信小程序问题&quot;&gt;&lt;a href=&quot;#微信小程序问题&quot; class=&quot;headerlink&quot; title=&quot;微信小程序问题&quot;&gt;&lt;/a&gt;微信小程序问题&lt;/h1&gt;&lt;h2 id=&quot;分享&quot;&gt;&lt;a href=&quot;#分享&quot; class=&quot;headerlink&quot; title=&quot;分
      
    
    </summary>
    
    
      <category term="wechat" scheme="http://yoursite.com/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>react 笔记</title>
    <link href="http://yoursite.com/2018/10/23/react/"/>
    <id>http://yoursite.com/2018/10/23/react/</id>
    <published>2018-10-23T06:17:44.662Z</published>
    <updated>2018-10-23T06:50:41.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">render (</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="literal">true</span>/<span class="literal">false</span> &amp;&amp; &lt;div&gt;如果变量是true才显示&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="react-redux"><a href="#react-redux" class="headerlink" title="react+redux"></a>react+redux</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">基于容器组件和展示组件相分离的开发思想</span><br><span class="line"></span><br><span class="line">Container通常会负责和服务端的沟通，还有一些业务逻辑的处理。他们通常只负责获取数据，处理数据，处理状态，但一般不知道如何去展示页面。</span><br><span class="line"></span><br><span class="line">Presentational Component通常不知道数据如何获取，也不知道这些数据是做什么用的，更不知道怎么去操作这些数据，他们一般只负责页面的渲染，把领导给的数据放到对应的位置。</span><br></pre></td></tr></table></figure><h2 id="redux使用"><a href="#redux使用" class="headerlink" title="redux使用"></a>redux使用</h2><h3 id="用到的redux库"><a href="#用到的redux库" class="headerlink" title="用到的redux库"></a>用到的redux库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redux,</span><br><span class="line">react-redux,</span><br><span class="line">redux-logger,</span><br><span class="line">redux-thunk</span><br></pre></td></tr></table></figure><h3 id="1-入口文件配置"><a href="#1-入口文件配置" class="headerlink" title="1.入口文件配置"></a>1.入口文件配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> configureStore <span class="keyword">from</span> <span class="string">'./store/ConfigureStore'</span>;</span><br><span class="line"></span><br><span class="line">ReactDOM.render((</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;App /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Router&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>Provider&gt;</span><br><span class="line">), <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><h3 id="2-创建store文件"><a href="#2-创建store文件" class="headerlink" title="2.创建store文件"></a>2.创建store文件</h3><p><strong>Store 就是把action和reducer联系到一起的对象</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// store/ConfigureStore.js</span><br><span class="line"></span><br><span class="line">// redux库里面提供的方法，创建store和middleware中间件</span><br><span class="line">import &#123; createStore, applyMiddleware &#125; from &apos;redux&apos;;</span><br><span class="line">// redux-logger打印logger的中间件</span><br><span class="line">import thunk from &apos;redux-thunk&apos;;</span><br><span class="line">import logger from &apos;redux-logger&apos;;</span><br><span class="line">// rootReducer</span><br><span class="line">import RootReducer from &apos;../reducers/RootReducer&apos;;</span><br><span class="line"></span><br><span class="line">let middlewares = [];</span><br><span class="line">middlewares.push(logger);</span><br><span class="line">middlewares.push(thunk);</span><br><span class="line"></span><br><span class="line">// 通过applyMiddleware将中间件添加</span><br><span class="line">const createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);</span><br><span class="line"></span><br><span class="line">// 导出configureStore，里面携带着reducer，中间件，初始值</span><br><span class="line">export default function configureStore (initialState) &#123;</span><br><span class="line">  return createStoreWithMiddleware(RootReducer, initialState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3-创建rootReducer文件"><a href="#3-创建rootReducer文件" class="headerlink" title="3.创建rootReducer文件"></a>3.创建rootReducer文件</h3><p><strong>rootReducer中放的是各个页面的reducer，推荐做法是一个页面公用一个reducer，方便管理</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// reducer/RootReducer.js</span><br><span class="line"></span><br><span class="line">import &#123; combineReducers &#125; from &apos;redux&apos;;</span><br><span class="line">// 引入各个页面的reducer</span><br><span class="line">import HomeReducer from &apos;./HomeReducer&apos;;</span><br><span class="line"></span><br><span class="line">const RootReducer = combineReducers(&#123;</span><br><span class="line">  HomeReducer,</span><br><span class="line">&#125;);</span><br><span class="line">export default RootReducer;</span><br></pre></td></tr></table></figure></p><h3 id="4-创建首页reducer"><a href="#4-创建首页reducer" class="headerlink" title="4.创建首页reducer"></a>4.创建首页reducer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// reducer/HomeReducer.js </span><br><span class="line"></span><br><span class="line">// ActionTypes里面存放着App中可能发生的情况（下一步创建）</span><br><span class="line">import * as types from &apos;../actions/ActionTypes&apos;;</span><br><span class="line"></span><br><span class="line">// 初始化值</span><br><span class="line">const initialState = &#123;</span><br><span class="line">  resourceList: &apos;&apos;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 导出HomeReducer。</span><br><span class="line">export default function HomeReducer (state = initialState, action) &#123;</span><br><span class="line"></span><br><span class="line">  switch (action.type) &#123;</span><br><span class="line">    case types.RESOURCE_LIST:</span><br><span class="line">      return Object.assign(&#123;&#125;, state, &#123;</span><br><span class="line">        state,</span><br><span class="line">        resourceList: action.list,</span><br><span class="line">      &#125;);</span><br><span class="line">    default:</span><br><span class="line">      return state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-创建ActionTypes文件"><a href="#5-创建ActionTypes文件" class="headerlink" title="5.创建ActionTypes文件"></a>5.创建ActionTypes文件</h3><p><strong>Action 是把数据从应用传到 store 的有效载荷。它是 store 数据的唯一来源。一般来说你会通过 store.dispatch() 将 action 传到 store。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// actions/ActionTypes.js</span><br><span class="line"></span><br><span class="line">// 为获取资源列表这个动作添加一个actionTypes类型</span><br><span class="line">export const RESOURCE_LIST = &apos;RESOURCE_LIST&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="6-创建homeAction页面"><a href="#6-创建homeAction页面" class="headerlink" title="6. 创建homeAction页面"></a>6. 创建homeAction页面</h3><p><strong>一个页面可能不止有一个action，将同一个页面的action放入到同一个文件，只需在使用到页面引入该文件即可</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// actions/HomeAction.js</span><br><span class="line"></span><br><span class="line">import * as types from &apos;../actions/ActionTypes&apos;;</span><br><span class="line">import API from &apos;../../api&apos;;</span><br><span class="line">import axios from &apos;axios&apos;;</span><br><span class="line"></span><br><span class="line">export function resourceList () &#123;</span><br><span class="line">  return dispatch =&gt; &#123;</span><br><span class="line">    return axios.post(API.GET_SEARCH_LIST, &#123;&#125;)</span><br><span class="line">      .then(function (res) &#123;</span><br><span class="line">        dispatch(getResourceList(res.data.data));</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(function (error) &#123;</span><br><span class="line">        console.log(error);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function getResourceList (list) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    // type是必要参数，通过type值判断</span><br><span class="line">    type: types.RESOURCE_LIST,</span><br><span class="line">    list</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="7-将页面与需要使用的reducer连接"><a href="#7-将页面与需要使用的reducer连接" class="headerlink" title="7.将页面与需要使用的reducer连接"></a>7.将页面与需要使用的reducer连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">// container/homePage/home.js</span><br><span class="line"></span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class="line">import &#123; BrowserRouter as Router, Route, Link, Prompt &#125; from &quot;react-router-dom&quot;;</span><br><span class="line">import &#123; resourceList &#125; from &apos;../../actions/HomeAction&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class HomePage extends React.Component &#123;</span><br><span class="line"></span><br><span class="line">  componentDidMount () &#123;</span><br><span class="line">    console.log(&apos;-----load home page-----&apos;)</span><br><span class="line">    this.props.resourceList()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    var resourceList = this.props.HomeReducer.resourceList.goodsResults;</span><br><span class="line">    console.log(resourceList)</span><br><span class="line">    return &lt;div&gt;</span><br><span class="line">      &lt;h1&gt;this is home content&lt;/h1&gt;</span><br><span class="line">      &lt;Link to=&quot;/search&quot; className=&quot;nav-link&quot;&gt;去资源大厅&lt;/Link&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          resourceList &amp;&amp; resourceList.map((item, index) =&gt; &#123;</span><br><span class="line">            return (</span><br><span class="line">              &lt;li key=&#123;index&#125;&gt;&#123;item.address&#125;&lt;/li&gt;</span><br><span class="line">            )</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 当组件 connect 后，dispatch 方法已经注入到 props 中，所以触发 Action 可以从 props 获取 dispatch 方法。</span><br><span class="line">export default connect((state) =&gt; &#123;</span><br><span class="line">  const &#123; HomeReducer &#125; = state;</span><br><span class="line">  return &#123;</span><br><span class="line">    HomeReducer</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, &#123; resourceList &#125;)(HomePage)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;条件渲染&quot;&gt;&lt;a href=&quot;#条件渲染&quot; class=&quot;headerlink&quot; title=&quot;条件渲染&quot;&gt;&lt;/a&gt;条件渲染&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>初步理解webView</title>
    <link href="http://yoursite.com/2018/07/23/webview/"/>
    <id>http://yoursite.com/2018/07/23/webview/</id>
    <published>2018-07-23T08:45:24.000Z</published>
    <updated>2018-07-23T08:59:44.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h1><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><pre><code> - 原生app：传统开发方式，用户体验较好，但是需要开发两个版本，成本较高- webApp:可以理解为生存在浏览器里的应用，他的宿主是浏览器而不是操作系统（可以跨平台）- 混合app：介于webApp和nativeApp之间，主要以js+Native两者相互调用为主。虽然交互体验会比不上原生app，但是其最大的特点是可以跨平台开发，快速迭代，大大减少了开发的成本。混合app虽然看上去是个Native App，但是只有一个webView，里面访问的是一个web app。由于这种开发方式被越来越多的人用到，所以webView便日渐凸显其重要地位。简单的来说webView能在移动应用中开辟一个页面，在里面显示html页面，css和js也同样能被解析，所以写一份代码在多个平台上运行的条件就是以webView为基础</code></pre><h1 id="UIWebView与WKWebView"><a href="#UIWebView与WKWebView" class="headerlink" title="UIWebView与WKWebView"></a>UIWebView与WKWebView</h1><p><strong>作用相同，都可以用来加载网页</strong></p><ul><li>WKWebView相对于UIWebView占用手机的内存更低（内存占用是uiwebview的1/4~1/3）</li><li>加载速度更快</li><li>支持更多的h5特性</li><li>拥有高达60FPS滚动刷新率及内置手势</li></ul><h1 id="WKWebView的基本用法"><a href="#WKWebView的基本用法" class="headerlink" title="WKWebView的基本用法"></a>WKWebView的基本用法</h1><p> <strong>一、创建配置类</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 在创建WKWebView之前，需要先创建配置对象，用于做一些配置</span><br><span class="line">WKWebViewConfiguration*config=[[WKWebViewConfiguration alloc]init];</span><br><span class="line">// 设置偏好设置</span><br><span class="line">config.preferences = [[WKPreferences alloc] init];</span><br><span class="line">// 默认为0</span><br><span class="line">config.preferences.minimumFontSize = 10;</span><br><span class="line">// 默认认为YES</span><br><span class="line">config.preferences.javaScriptEnabled = YES;</span><br><span class="line">// 在iOS上默认为NO，表示不能自动通过窗口打开</span><br><span class="line">config.preferences.javaScriptCanOpenWindowsAutomatically = NO;</span><br></pre></td></tr></table></figure></p><p> <strong>二、创建WKWebView</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 初始化一个 WKWebView</span><br><span class="line">_wkWebView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:[WKWebViewConfiguration new]];</span><br><span class="line">// 构建一个请求</span><br><span class="line">NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@&quot;http://www.jd.com&quot;]];</span><br><span class="line">// 加载这个请求</span><br><span class="line">[_wkWebView loadRequest:request];</span><br></pre></td></tr></table></figure></p><p> <strong>三、WKUIDelegate 和 WKNavigationDelegate</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> #pragma mark - WKNavigationDelegate</span><br><span class="line">// 页面开始加载时调用</span><br><span class="line">- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(WKNavigation *)navigation&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">// 当内容开始返回时调用</span><br><span class="line">- (void)webView:(WKWebView *)webView didCommitNavigation:(WKNavigation *)navigation&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">// 页面加载完成之后调用</span><br><span class="line">- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">// 页面加载失败时调用</span><br><span class="line">- (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(WKNavigation *)navigation&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">// 接收到服务器跳转请求之后调用</span><br><span class="line">- (void)webView:(WKWebView *)webView didReceiveServerRedirectForProvisionalNavigation:(WKNavigation *)navigation&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">// 在收到响应后，决定是否跳转</span><br><span class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationResponse:(WKNavigationResponse *)navigationResponse decisionHandler:(void (^)(WKNavigationResponsePolicy))decisionHandler&#123;</span><br><span class="line"> </span><br><span class="line">    NSLog(@&quot;%@&quot;,navigationResponse.response.URL.absoluteString);</span><br><span class="line">    //允许跳转</span><br><span class="line">    decisionHandler(WKNavigationResponsePolicyAllow);</span><br><span class="line">    //不允许跳转</span><br><span class="line">    //decisionHandler(WKNavigationResponsePolicyCancel);</span><br><span class="line">&#125;</span><br><span class="line">// 在发送请求之前，决定是否跳转</span><br><span class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler&#123;</span><br><span class="line"> </span><br><span class="line">     NSLog(@&quot;%@&quot;,navigationAction.request.URL.absoluteString);</span><br><span class="line">    //允许跳转</span><br><span class="line">    decisionHandler(WKNavigationActionPolicyAllow);</span><br><span class="line">    //不允许跳转</span><br><span class="line">    //decisionHandler(WKNavigationActionPolicyCancel);</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - WKUIDelegate</span><br><span class="line">// 输入框</span><br><span class="line">- (void)webView:(WKWebView *)webView runJavaScriptTextInputPanelWithPrompt:(NSString *)prompt defaultText:(nullable NSString *)defaultText initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(NSString * __nullable result))completionHandler&#123;</span><br><span class="line">    completionHandler(@&quot;http&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 确认框</span><br><span class="line">- (void)webView:(WKWebView *)webView runJavaScriptConfirmPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(BOOL result))completionHandler&#123;</span><br><span class="line">    completionHandler(YES);</span><br><span class="line">&#125;</span><br><span class="line">// 警告框</span><br><span class="line">- (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler&#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;,message);</span><br><span class="line">    completionHandler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> <strong>四、js和native交互</strong></p><ul><li>OC –&gt; JS<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">    alert(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[self.webView evaluateJavaScript:@&quot;test(&apos;hello&apos;)&quot; completionHandler:^(id _Nullable item, NSError * _Nullable error) &#123;</span><br><span class="line">    NSLog(@&quot;alert&quot;);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><ul><li>JS –&gt; OC<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;);</span><br><span class="line">eg:</span><br><span class="line">window.webkit.messageHandlers.currentCookies.postMessage(document.cookie);</span><br></pre></td></tr></table></figure></li></ul> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[controller addScriptMessageHandler:self name:@&quot;currentCookies&quot;];</span><br><span class="line"></span><br><span class="line">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message &#123;</span><br><span class="line">    if ([message.name isEqualToString:@&quot;currentCookies&quot;]) &#123;</span><br><span class="line">        NSString *cookiesStr = message.body;</span><br><span class="line">        NSLog(@&quot;当前的cookie为： %@&quot;, cookiesStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前的cordova框架，要和native通信都是通过cordova plugin来实现的，</p><ul><li>ts调用cordova plugin提供的API</li><li>cordova根据调用的API来调用对应的native代码</li><li>native接收到传来的请求（方法调用），实现相应的功能后，把相应的结果返回给ts</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WebView&quot;&gt;&lt;a href=&quot;#WebView&quot; class=&quot;headerlink&quot; title=&quot;WebView&quot;&gt;&lt;/a&gt;WebView&lt;/h1&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背
      
    
    </summary>
    
    
      <category term="webView" scheme="http://yoursite.com/tags/webView/"/>
    
  </entry>
  
  <entry>
    <title>vsCode 配置</title>
    <link href="http://yoursite.com/2018/07/23/vs-code/"/>
    <id>http://yoursite.com/2018/07/23/vs-code/</id>
    <published>2018-07-23T06:38:57.620Z</published>
    <updated>2018-10-23T06:18:35.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用vsCode配置及插件整理"><a href="#常用vsCode配置及插件整理" class="headerlink" title="常用vsCode配置及插件整理"></a>常用vsCode配置及插件整理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;editor.tabSize&quot;: 2,</span><br><span class="line">    &quot;workbench.iconTheme&quot;: &quot;vscode-icons&quot;,</span><br><span class="line">    &quot;editor.renderIndentGuides&quot;: false,</span><br><span class="line">    &quot;vsicons.projectDetection.disableDetect&quot;: true,</span><br><span class="line">    &quot;window.zoomLevel&quot;: 0,</span><br><span class="line">    &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">    &quot;beautify.language&quot;: &#123;</span><br><span class="line">        &quot;js&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: [</span><br><span class="line">                &quot;javascript&quot;,</span><br><span class="line">                &quot;json&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;filename&quot;: [</span><br><span class="line">                &quot;.jshintrc&quot;,</span><br><span class="line">                &quot;.jsbeautify&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;css&quot;: [</span><br><span class="line">            &quot;css&quot;,</span><br><span class="line">            &quot;scss&quot;,</span><br><span class="line">            &quot;less&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;html&quot;: [</span><br><span class="line">            &quot;htm&quot;,</span><br><span class="line">            &quot;html&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;vsicons.dontShowNewVersionMessage&quot;: true,</span><br><span class="line">    &quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;,</span><br><span class="line">    &quot;vetur.format.defaultFormatter.html&quot;: &quot;js-beautify-html&quot;,</span><br><span class="line">    &quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;: true,</span><br><span class="line">    &quot;typescript.format.insertSpaceBeforeFunctionParenthesis&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用vsCode配置及插件整理&quot;&gt;&lt;a href=&quot;#常用vsCode配置及插件整理&quot; class=&quot;headerlink&quot; title=&quot;常用vsCode配置及插件整理&quot;&gt;&lt;/a&gt;常用vsCode配置及插件整理&lt;/h2&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="vsCode" scheme="http://yoursite.com/tags/vsCode/"/>
    
  </entry>
  
</feed>
