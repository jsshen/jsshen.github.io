<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason&#39;s blog</title>
  
  <subtitle>xixihaha</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-03T05:54:47.825Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Jason Shen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HTTP和TCP</title>
    <link href="http://yoursite.com/2020/06/03/HTTP%E5%92%8CTCP/"/>
    <id>http://yoursite.com/2020/06/03/HTTP和TCP/</id>
    <published>2020-06-03T05:53:30.343Z</published>
    <updated>2020-06-03T05:54:47.825Z</updated>
    
    <content type="html"><![CDATA[<p>http协议：浏览器与服务器之间通信的协议，主要有请求和响应的过程。基本流程为：</p><ol><li>在浏览器输入网址</li><li>浏览器向dns发送请求，获取ip地址</li><li>浏览器用ip地址向服务器发送请求</li><li>服务器接收请求后处理</li><li>处理完成后生成结果返回给浏览器</li><li>浏览器接收响应后解析并渲染</li></ol><p>渲染的过程：</p><ol><li>通过html代码生成dom树</li><li>根据dom树和css规则生成渲染树</li><li>确定渲染树中元素的位置、大小</li><li>浏览器根据渲染树绘制页面</li></ol><p>http请求是无状态的，每一次的请求都当做是一次新的请求，如果想让其之间 有关联，那就要使用到cookie和session，浏览器请求到服务器之后，服务器会开启session机制，设置一个sessionid在响应头返回，浏览器通过cookie将sessionid存储下来，下一次请求的时候请求头中的cookie就会携带sessionid到服务器，看是否与服务端的sessionid相匹配。</p><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><blockquote><p>请求报文：请求行/请求头/请求数据</p></blockquote><p>请求行：由请求方法、请求地址和协议版本组成</p><h4 id="常见请求头如下："><a href="#常见请求头如下：" class="headerlink" title="常见请求头如下："></a>常见请求头如下：</h4><ol><li>HOST -&gt; 接受请求的服务器地址可以是ip:端口号，也可以是域名</li><li>User-Agent -&gt; 发送请求的应用程序信息</li><li>Connection -&gt; 指定与连接相关的属性，如Keep-Alive</li><li>Accept-Charset：通知服务端可以发送的编码格式</li><li>Accept-Encoding：通知服务端可以发送的数据压缩格式</li><li>Accept-Language：通知服务端可以发送的语言</li></ol><h2 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h2><blockquote><p>响应报文：状态行/响应头/响应正文</p></blockquote><h4 id="常见状态："><a href="#常见状态：" class="headerlink" title="常见状态："></a>常见状态：</h4><ul><li>1xx：指示信息–表示请求已接收，继续处理。</li><li>2xx：成功–表示请求已被成功接收、理解、接受。</li><li>3xx：重定向–要完成请求必须进行更进一步的操作。</li><li>4xx：客户端错误–请求有语法错误或请求无法实现。</li><li>5xx：服务器端错误–服务器未能实现合法的请求。</li></ul><h4 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h4><ul><li>200： 响应成功</li><li>302： 页面重定向</li><li>400： 客户端请求有语法错误，不能被服务器识别</li><li>403： 服务器收到请求，但是拒绝提供服务</li><li>404： 请求资源不存在</li><li>500： 服务器内部错误</li></ul><h4 id="常见响应头"><a href="#常见响应头" class="headerlink" title="常见响应头"></a>常见响应头</h4><ul><li>Server -&gt; 服务器应用程序软件的名称和版本</li><li>Content-Type -&gt; 响应正文的类型（是图片还是二进制字符串）</li><li>Content-length -&gt; 响应正文长度</li><li>Content-Charset -&gt; 响应正文的编码</li><li>Content-Encoding -&gt; 响应正文使用的数据压缩格式</li><li>Content-language -&gt; 响应正文使用的语言</li></ul><h2 id="三次握手和四次挥手详细介绍"><a href="#三次握手和四次挥手详细介绍" class="headerlink" title="三次握手和四次挥手详细介绍"></a>三次握手和四次挥手详细介绍</h2><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>要说http就绕不开tcp，TCP协议对应于传输层，而HTTP协议对应于应用层，从本质上来说，二者没有可比性。但是，http是基于tcp协议的。</p><h3 id="什么是三次握手和四次挥手"><a href="#什么是三次握手和四次挥手" class="headerlink" title="什么是三次握手和四次挥手"></a>什么是三次握手和四次挥手</h3><p>TCP是一种面向连接的单播协议，在发送数据前，通信双方必须在彼此间建立一条连接。所谓的“连接”，其实是客户端和服务器的内存里保存的一份关于对方的信息，如ip地址、端口号等。</p><p>TCP提供了一种可靠、面向连接、字节流、传输层的服务，采用三次握手建立一个连接。采用4次挥手来关闭一个连接。</p><h3 id="为什么要进行三次握手和四次挥手"><a href="#为什么要进行三次握手和四次挥手" class="headerlink" title="为什么要进行三次握手和四次挥手"></a>为什么要进行三次握手和四次挥手</h3><p>==三次握手==</p><ol><li><p>第一次握手 –&gt; 客户端发送网络包，服务端收到了。服务端得出结论：服务端接收能力，客户端发送能力没问题。</p></li><li><p>第二次握手 –&gt; 服务端发包，客户端收到了。客户端得出结论：服务端和客户端的接收、发送能力都没问题。  </p></li><li><p>第三次握手 –&gt; 客户端再次发包，服务端收到了。服务端得出结论：服务端和客户端的接收、发送能力都没问题。</p></li></ol><p>总结： 结果上面三次握手的过程，客户端和服务端都确认了自己的接收能力正常，之后就可以正常通信了。</p><p>==四次挥手==</p><p>这是因为服务端在LISTEN状态下，收到建立连接请求的SYN报文后，把ACK和SYN放在一个报文里发送给客户端。而关闭连接时，当收到对方的FIN报文时，仅仅表示对方不再发送数据了但是还能接收数据，己方是否现在关闭发送数据通道，需要上层应用来决定，因此，己方ACK和FIN一般都会分开发送。</p><h3 id="三次握手和四次挥手执行过程"><a href="#三次握手和四次挥手执行过程" class="headerlink" title="三次握手和四次挥手执行过程"></a>三次握手和四次挥手执行过程</h3><ul><li>ACK —— 确认，使得确认号有效。 </li><li>RST —— 重置连接（经常看到的reset by peer）就是此字段搞的鬼。 </li><li>SYN —— 用于初如化一个连接的序列号。 </li><li>FIN —— 该报文段的发送方已经结束向对方发送数据。</li></ul><p>==三次握手过程==</p><ol><li><p>客户端发送一个SYN(J)包给服务端，然后等待服务端的ACK回复，进入SYN-SENT状态</p></li><li><p>服务端接收到客户端的SYN包后，返回一个ACK(J+1)和一个自己的SYN包(K)，服务端进入进入SYN-RECIVED状态。</p></li><li><p>客户端收到ACK包后，进入ESTABLISHED状态。然后根据服务端发来的SYN(K)包，返回给服务端一个ACK(K+1)包。服务端收到ACK回复后，也把自己的状态设置为ESTABLISHED。</p></li></ol><p>==四次挥手过程==</p><ol><li><p>客户端发送一个FIN(M)包，此时客户端进入FIN-WAIT-1状态，这表明客户端已经没有数据要发送了。</p></li><li><p>服务端收到了客户端发来的FIN(M)包后，向客户端发回一个ACK(M+1)包，此时服务端进入CLOSE-WAIT状态，客户端进入FIN-WAIT-2状态。</p></li><li><p>服务端向客户端发送FIN(N)包，请求关闭连接，同时服务端进入LAST-ACK状态。</p></li><li><p>lient收到服务端发送的FIN(N)包，进入TIME-WAIT状态。向服务端发送ACK(N+1)包，服务端收到客户端的ACK(N+1)包以后，进入CLOSE状态；客户端等待一段时间还没有得到回复后判断服务端已正式关闭，进入CLOSE状态。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;http协议：浏览器与服务器之间通信的协议，主要有请求和响应的过程。基本流程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在浏览器输入网址&lt;/li&gt;
&lt;li&gt;浏览器向dns发送请求，获取ip地址&lt;/li&gt;
&lt;li&gt;浏览器用ip地址向服务器发送请求&lt;/li&gt;
&lt;li&gt;服务器接收请求后处理&lt;
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="tcp" scheme="http://yoursite.com/tags/tcp/"/>
    
  </entry>
  
  <entry>
    <title>this 指向</title>
    <link href="http://yoursite.com/2019/12/23/this/"/>
    <id>http://yoursite.com/2019/12/23/this/</id>
    <published>2019-12-23T06:12:23.426Z</published>
    <updated>2019-12-23T06:13:25.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><blockquote><p>this 是JavaScript语言的一个关键字<br>this指向的本质：谁调用指向谁 + 就近原则</p></blockquote><h4 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h4><p>this始终指向全局对象Window，无论是否严格模式</p><h4 id="对象中"><a href="#对象中" class="headerlink" title="对象中"></a>对象中</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">a : <span class="number">5</span>,</span><br><span class="line">f1 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === obj1) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1.f1();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">a : <span class="number">5</span>,</span><br><span class="line">f2 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === obj2) <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> init = obj2.f2 <span class="comment">//重点看这里</span></span><br><span class="line">init();</span><br></pre></td></tr></table></figure><p>当函数作为对象的属性来调用时，谁调用则this指向谁。obj1.f1()由obj1调用，this指向obj1；obj2.f2由init调用，相当于window.init()，所以this指向window。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">a : <span class="number">5</span>,</span><br><span class="line">obj4 : &#123;</span><br><span class="line">a : <span class="number">10</span>,</span><br><span class="line">f3 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a) <span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">obj3.obj4.f3();</span><br></pre></td></tr></table></figure></p><p>虽然最终调用的是obj3,但是在遵循就近原则的情况下，调用他的是obj4，所以this指向的是obj4，那么必然打印出来的就是10了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj5 = &#123;</span><br><span class="line">a : <span class="number">5</span>,</span><br><span class="line">f5 : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === obj5) <span class="comment">//true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> init = obj5;</span><br><span class="line">init.f5();</span><br></pre></td></tr></table></figure></p><p>在这里直接将对象obj5赋值给变量init，然后由变量去调用f5,实则和obj5去调用f5是一样的，this指向的还是对象obj5,所以在这里一定要注意，千万不要认为是window调用函数f5。</p><h4 id="call中的this关键字"><a href="#call中的this关键字" class="headerlink" title="call中的this关键字"></a>call中的this关键字</h4><blockquote><p>call() 、bind()、apply()这类方法绑定this关键字又称为显示绑定，明面上我们完全可以看到他指向了谁<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f7</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.x = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a) <span class="comment">// 20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj5 = &#123;</span><br><span class="line">a : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">f7.call(obj5);</span><br><span class="line">obj5.x();</span><br></pre></td></tr></table></figure></p></blockquote><p>通过call()方法，函数f7被封装为对象obj5的一个属性，this的值指向了调用函数的对象obj5了，</p><p>通过对call()方法的使用，我们知道，如果第一个参数为null，或者不写，那么其间的对象就是window。</p><h4 id="构造函数中的this"><a href="#构造函数中的this" class="headerlink" title="构造函数中的this"></a>构造函数中的this</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">this</span>.b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">this</span>.f6 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.c = <span class="keyword">this</span>.a+<span class="keyword">this</span>.b;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.c); <span class="comment">//30</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === F1) <span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> oInit = <span class="keyword">new</span> F1();</span><br><span class="line">oInit.f6();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;this指向&quot;&gt;&lt;a href=&quot;#this指向&quot; class=&quot;headerlink&quot; title=&quot;this指向&quot;&gt;&lt;/a&gt;this指向&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;this 是JavaScript语言的一个关键字&lt;br&gt;this指向的本质：谁调用
      
    
    </summary>
    
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>初步理解webView</title>
    <link href="http://yoursite.com/2018/07/23/webview/"/>
    <id>http://yoursite.com/2018/07/23/webview/</id>
    <published>2018-07-23T08:45:24.000Z</published>
    <updated>2018-07-23T08:59:44.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h1><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><pre><code> - 原生app：传统开发方式，用户体验较好，但是需要开发两个版本，成本较高- webApp:可以理解为生存在浏览器里的应用，他的宿主是浏览器而不是操作系统（可以跨平台）- 混合app：介于webApp和nativeApp之间，主要以js+Native两者相互调用为主。虽然交互体验会比不上原生app，但是其最大的特点是可以跨平台开发，快速迭代，大大减少了开发的成本。混合app虽然看上去是个Native App，但是只有一个webView，里面访问的是一个web app。由于这种开发方式被越来越多的人用到，所以webView便日渐凸显其重要地位。简单的来说webView能在移动应用中开辟一个页面，在里面显示html页面，css和js也同样能被解析，所以写一份代码在多个平台上运行的条件就是以webView为基础</code></pre><h1 id="UIWebView与WKWebView"><a href="#UIWebView与WKWebView" class="headerlink" title="UIWebView与WKWebView"></a>UIWebView与WKWebView</h1><p><strong>作用相同，都可以用来加载网页</strong></p><ul><li>WKWebView相对于UIWebView占用手机的内存更低（内存占用是uiwebview的1/4~1/3）</li><li>加载速度更快</li><li>支持更多的h5特性</li><li>拥有高达60FPS滚动刷新率及内置手势</li></ul><h1 id="WKWebView的基本用法"><a href="#WKWebView的基本用法" class="headerlink" title="WKWebView的基本用法"></a>WKWebView的基本用法</h1><p> <strong>一、创建配置类</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 在创建WKWebView之前，需要先创建配置对象，用于做一些配置</span><br><span class="line">WKWebViewConfiguration*config=[[WKWebViewConfiguration alloc]init];</span><br><span class="line">// 设置偏好设置</span><br><span class="line">config.preferences = [[WKPreferences alloc] init];</span><br><span class="line">// 默认为0</span><br><span class="line">config.preferences.minimumFontSize = 10;</span><br><span class="line">// 默认认为YES</span><br><span class="line">config.preferences.javaScriptEnabled = YES;</span><br><span class="line">// 在iOS上默认为NO，表示不能自动通过窗口打开</span><br><span class="line">config.preferences.javaScriptCanOpenWindowsAutomatically = NO;</span><br></pre></td></tr></table></figure></p><p> <strong>二、创建WKWebView</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 初始化一个 WKWebView</span><br><span class="line">_wkWebView = [[WKWebView alloc] initWithFrame:self.view.frame configuration:[WKWebViewConfiguration new]];</span><br><span class="line">// 构建一个请求</span><br><span class="line">NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:@&quot;http://www.jd.com&quot;]];</span><br><span class="line">// 加载这个请求</span><br><span class="line">[_wkWebView loadRequest:request];</span><br></pre></td></tr></table></figure></p><p> <strong>三、WKUIDelegate 和 WKNavigationDelegate</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"> #pragma mark - WKNavigationDelegate</span><br><span class="line">// 页面开始加载时调用</span><br><span class="line">- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(WKNavigation *)navigation&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">// 当内容开始返回时调用</span><br><span class="line">- (void)webView:(WKWebView *)webView didCommitNavigation:(WKNavigation *)navigation&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">// 页面加载完成之后调用</span><br><span class="line">- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">// 页面加载失败时调用</span><br><span class="line">- (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(WKNavigation *)navigation&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">// 接收到服务器跳转请求之后调用</span><br><span class="line">- (void)webView:(WKWebView *)webView didReceiveServerRedirectForProvisionalNavigation:(WKNavigation *)navigation&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">// 在收到响应后，决定是否跳转</span><br><span class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationResponse:(WKNavigationResponse *)navigationResponse decisionHandler:(void (^)(WKNavigationResponsePolicy))decisionHandler&#123;</span><br><span class="line"> </span><br><span class="line">    NSLog(@&quot;%@&quot;,navigationResponse.response.URL.absoluteString);</span><br><span class="line">    //允许跳转</span><br><span class="line">    decisionHandler(WKNavigationResponsePolicyAllow);</span><br><span class="line">    //不允许跳转</span><br><span class="line">    //decisionHandler(WKNavigationResponsePolicyCancel);</span><br><span class="line">&#125;</span><br><span class="line">// 在发送请求之前，决定是否跳转</span><br><span class="line">- (void)webView:(WKWebView *)webView decidePolicyForNavigationAction:(WKNavigationAction *)navigationAction decisionHandler:(void (^)(WKNavigationActionPolicy))decisionHandler&#123;</span><br><span class="line"> </span><br><span class="line">     NSLog(@&quot;%@&quot;,navigationAction.request.URL.absoluteString);</span><br><span class="line">    //允许跳转</span><br><span class="line">    decisionHandler(WKNavigationActionPolicyAllow);</span><br><span class="line">    //不允许跳转</span><br><span class="line">    //decisionHandler(WKNavigationActionPolicyCancel);</span><br><span class="line">&#125;</span><br><span class="line">#pragma mark - WKUIDelegate</span><br><span class="line">// 输入框</span><br><span class="line">- (void)webView:(WKWebView *)webView runJavaScriptTextInputPanelWithPrompt:(NSString *)prompt defaultText:(nullable NSString *)defaultText initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(NSString * __nullable result))completionHandler&#123;</span><br><span class="line">    completionHandler(@&quot;http&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 确认框</span><br><span class="line">- (void)webView:(WKWebView *)webView runJavaScriptConfirmPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(BOOL result))completionHandler&#123;</span><br><span class="line">    completionHandler(YES);</span><br><span class="line">&#125;</span><br><span class="line">// 警告框</span><br><span class="line">- (void)webView:(WKWebView *)webView runJavaScriptAlertPanelWithMessage:(NSString *)message initiatedByFrame:(WKFrameInfo *)frame completionHandler:(void (^)(void))completionHandler&#123;</span><br><span class="line">    NSLog(@&quot;%@&quot;,message);</span><br><span class="line">    completionHandler();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> <strong>四、js和native交互</strong></p><ul><li>OC –&gt; JS<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">    alert(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[self.webView evaluateJavaScript:@&quot;test(&apos;hello&apos;)&quot; completionHandler:^(id _Nullable item, NSError * _Nullable error) &#123;</span><br><span class="line">    NSLog(@&quot;alert&quot;);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><ul><li>JS –&gt; OC<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.webkit.messageHandlers.&lt;name&gt;.postMessage(&lt;messageBody&gt;);</span><br><span class="line">eg:</span><br><span class="line">window.webkit.messageHandlers.currentCookies.postMessage(document.cookie);</span><br></pre></td></tr></table></figure></li></ul> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[controller addScriptMessageHandler:self name:@&quot;currentCookies&quot;];</span><br><span class="line"></span><br><span class="line">- (void)userContentController:(WKUserContentController *)userContentController didReceiveScriptMessage:(WKScriptMessage *)message &#123;</span><br><span class="line">    if ([message.name isEqualToString:@&quot;currentCookies&quot;]) &#123;</span><br><span class="line">        NSString *cookiesStr = message.body;</span><br><span class="line">        NSLog(@&quot;当前的cookie为： %@&quot;, cookiesStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前的cordova框架，要和native通信都是通过cordova plugin来实现的，</p><ul><li>ts调用cordova plugin提供的API</li><li>cordova根据调用的API来调用对应的native代码</li><li>native接收到传来的请求（方法调用），实现相应的功能后，把相应的结果返回给ts</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WebView&quot;&gt;&lt;a href=&quot;#WebView&quot; class=&quot;headerlink&quot; title=&quot;WebView&quot;&gt;&lt;/a&gt;WebView&lt;/h1&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背
      
    
    </summary>
    
    
      <category term="webView" scheme="http://yoursite.com/tags/webView/"/>
    
  </entry>
  
  <entry>
    <title>vsCode 配置</title>
    <link href="http://yoursite.com/2018/07/23/vs-code/"/>
    <id>http://yoursite.com/2018/07/23/vs-code/</id>
    <published>2018-07-23T06:38:57.620Z</published>
    <updated>2018-10-23T06:18:35.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用vsCode配置及插件整理"><a href="#常用vsCode配置及插件整理" class="headerlink" title="常用vsCode配置及插件整理"></a>常用vsCode配置及插件整理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;editor.tabSize&quot;: 2,</span><br><span class="line">    &quot;workbench.iconTheme&quot;: &quot;vscode-icons&quot;,</span><br><span class="line">    &quot;editor.renderIndentGuides&quot;: false,</span><br><span class="line">    &quot;vsicons.projectDetection.disableDetect&quot;: true,</span><br><span class="line">    &quot;window.zoomLevel&quot;: 0,</span><br><span class="line">    &quot;editor.formatOnSave&quot;: true,</span><br><span class="line">    &quot;beautify.language&quot;: &#123;</span><br><span class="line">        &quot;js&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: [</span><br><span class="line">                &quot;javascript&quot;,</span><br><span class="line">                &quot;json&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;filename&quot;: [</span><br><span class="line">                &quot;.jshintrc&quot;,</span><br><span class="line">                &quot;.jsbeautify&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;css&quot;: [</span><br><span class="line">            &quot;css&quot;,</span><br><span class="line">            &quot;scss&quot;,</span><br><span class="line">            &quot;less&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;html&quot;: [</span><br><span class="line">            &quot;htm&quot;,</span><br><span class="line">            &quot;html&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;vsicons.dontShowNewVersionMessage&quot;: true,</span><br><span class="line">    &quot;vetur.format.defaultFormatter.js&quot;: &quot;vscode-typescript&quot;,</span><br><span class="line">    &quot;vetur.format.defaultFormatter.html&quot;: &quot;js-beautify-html&quot;,</span><br><span class="line">    &quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;: true,</span><br><span class="line">    &quot;typescript.format.insertSpaceBeforeFunctionParenthesis&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;常用vsCode配置及插件整理&quot;&gt;&lt;a href=&quot;#常用vsCode配置及插件整理&quot; class=&quot;headerlink&quot; title=&quot;常用vsCode配置及插件整理&quot;&gt;&lt;/a&gt;常用vsCode配置及插件整理&lt;/h2&gt;&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="vsCode" scheme="http://yoursite.com/tags/vsCode/"/>
    
  </entry>
  
</feed>
